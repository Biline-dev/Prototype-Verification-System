(tp_4
 (fusion_TCC1 0
  (fusion_TCC1-1 nil 3911387222 ("" (subtype-tcc) nil nil) nil nil
   (fusion subtype "tp_4.l" "(list_adt[nat].cons?)")))
 (fusion_TCC2 0
  (fusion_TCC2-1 nil 3911387222 ("" (termination-tcc) nil nil) nil nil
   (fusion termination "tp_4.fusion(list_adt[nat].cdr(tp_4.l), tp_4.p)"
    "nil")))
 (thm0_TCC1 0
  (thm0_TCC1-1 nil 3911387222 ("" (subtype-tcc) nil nil) nil nil
   (thm0 subtype "list_adt[real].cons(5, list_adt[real].null)"
    "list[nat]")))
 (thm0_TCC2 0
  (thm0_TCC2-1 nil 3911387222 ("" (subtype-tcc) nil nil) nil nil
   (thm0 subtype
    "list_adt[real].cons(7, list_adt[real].cons(1, list_adt[real].null))"
    "list[nat]")))
 (thm0 0
  (thm0-1 nil 3911387231
   ("" (expand "fusion")
    (("" (expand "fusion")
      (("" (expand "fusion") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((fusion def-decl "list[nat]" tp_4 nil)) SHOSTAK))
 (thm1_2 0
  (thm1_2-1 nil 3911561037
   ("" (induct "l")
    (("1" (expand "fusion") (("1" (propax) nil nil)) nil)
     ("2" (skolem!)
      (("2" (flatten)
        (("2" (expand "fusion" 1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (thm1_3 0
  (thm1_3-1 nil 3911561037
   ("" (induct "l")
    (("1" (skolem 1 "p")
      (("1" (flatten)
        (("1" (expand "fusion") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (skolem 1 "p")
          (("2" (flatten)
            (("2" (expand "fusion" -2) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fusion def-decl "list[nat]" tp_4 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (thm1_4_TCC1 0
  (thm1_4_TCC1-1 nil 3911387222 ("" (subtype-tcc) nil nil) nil nil
   (thm1_4 subtype "tp_4.fusion(tp_4.l, tp_4.p)"
    "(list_adt[nat].cons?)")))
 (thm1_4 0
  (thm1_4-1 nil 3911561038
   ("" (induct "l")
    (("1" (skolem 1 "p") (("1" (flatten) nil nil)) nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (skolem 1 "p")
          (("2" (flatten)
            (("2" (inst -1 "p")
              (("2" (expand "fusion" 2) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem 1 "l")
      (("3" (flatten)
        (("3" (skolem 3 "p")
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skolem 1 ("l" "p"))
      (("4" (flatten)
        (("4" (skolem 3 "k")
          (("4" (flatten)
            (("4" (assert)
              (("4" (expand "fusion" 4) (("4" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (fusion def-decl "list[nat]" tp_4 nil))
   shostak))
 (thm1_5 0
  (thm1_5-1 nil 3911561038
   ("" (induct "l")
    (("1" (skolem!)
      (("1" (expand "fusion") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (expand "fusion" 1 (2 3))
          (("2" (expand "fusion" 1 1)
            (("2" (skolem 1 ("p" "q"))
              (("2" (inst?)
                (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fusion def-decl "list[nat]" tp_4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (thm2_2 0
  (thm2_2-1 nil 3911561039
   ("" (induct "l")
    (("1" (skolem 1 "p")
      (("1" (expand "fusion" 1 1)
        (("1" (expand "miroir" 1 3)
          (("1" (lemma "thm1_2")
            (("1" (inst?)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (skolem 1 "p")
          (("2" (expand "fusion" 1 1)
            (("2" (expand "miroir" 1 (1 3))
              (("2" (inst?)
                (("2" (replace -1)
                  (("2" (lemma "thm1_5") (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (thm1_5 formula-decl nil tp_4 nil)
    (thm1_2 formula-decl nil tp_4 nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fusion def-decl "list[nat]" tp_4 nil)
    (miroir def-decl "list[nat]" tp_4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (thm2_3 0
  (thm2_3-1 nil 3911561039
   ("" (induct "l")
    (("1" (expand "miroir") (("1" (propax) nil nil)) nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (expand "miroir" 1 2)
          (("2" (lemma "thm2_2")
            (("2" (inst?)
              (("2" (replace -1)
                (("2" (replace -2)
                  (("2" (expand "miroir" 1)
                    (("2" (expand "miroir" 1)
                      (("2" (expand "fusion" 1 2)
                        (("2" (expand "fusion" 1 1)
                          (("2" (assert)
                            (("2" (expand "fusion" 1 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (fusion def-decl "list[nat]" tp_4 nil)
    (thm2_2 formula-decl nil tp_4 nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (miroir def-decl "list[nat]" tp_4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (thm2_4 0
  (thm2_4-1 nil 3911561040
   ("" (induct "l")
    (("1" (skolem!) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("n" "l"))
      (("2" (flatten)
        (("2" (expand "fusion" 1 1)
          (("2" (expand "length" 1 (1 3))
            (("2" (skolem 1 "p")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (fusion def-decl "list[nat]" tp_4 nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (thm2_5 0
  (thm2_5-1 nil 3911560963
   ("" (induct "l")
    (("1" (expand "miroir") (("1" (propax) nil nil)) nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (expand "miroir" 1)
          (("2" (expand "length" 1 2)
            (("2" (lemma "thm2_4")
              (("2" (inst? -1)
                (("2" (replace -1)
                  (("2" (assert)
                    (("2" (replace -2)
                      (("2" (assert)
                        (("2" (expand "length" 1)
                          (("2" (expand "length")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

