(fib2
 (somme_TCC1 0
  (somme_TCC1-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil nil
   (somme subtype "(number_fields.-)(fib2.n, 1)" "nat")))
 (somme_TCC2 0
  (somme_TCC2-1 nil 3912046286 ("" (termination-tcc) nil nil) nil nil
   (somme termination "fib2.somme((number_fields.-)(fib2.n, 1))"
    "nil")))
 (fib_TCC1 0
  (fib_TCC1-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil nil
   (fib subtype "(number_fields.-)(fib2.n, 2)" "nat")))
 (fib_TCC2 0
  (fib_TCC2-1 nil 3912046286 ("" (termination-tcc) nil nil) nil nil
   (fib termination "fib2.fib((number_fields.-)(fib2.n, 2))" "nil")))
 (thm_fibo_TCC1 0
  (thm_fibo_TCC1-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil nil
   (thm_fibo subtype "(number_fields.-)(fib2.n, 1)" "nat")))
 (thm_fibo_TCC2 0
  (thm_fibo_TCC2-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil nil
   (thm_fibo subtype "(number_fields.-)(fib2.p, 1)" "nat")))
 (thm_fibo 0
  (thm_fibo-1 nil 3912046286
   ("" (induct "n")
    (("1" (skolem!) (("1" (assert) nil nil)) nil)
     ("2" (skolem 1 "n")
      (("2" (flatten)
        (("2" (skolem 1 "p")
          (("2" (flatten)
            (("2" (inst -1 "p+1")
              (("2" (assert)
                (("2" (case "n=0")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (expand "fib" 1 (1 2 4))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (expand "fib" 2 (4 5))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem!)
      (("3" (flatten)
        (("3" (skolem!) (("3" (flatten) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skolem!)
      (("4" (flatten)
        (("4" (skolem!) (("4" (flatten) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fib def-decl "nat" fib2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (thm_fibo_app1_TCC1 0
  (thm_fibo_app1_TCC1-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil
   nil (thm_fibo_app1 subtype "(number_fields.-)(fib2.n, 1)" "nat")))
 (thm_fibo_app1 0
  (thm_fibo_app1-1 nil 3912047016
   ("" (skolem 1 "n")
    (("" (flatten)
      (("" (lemma "thm_fibo")
        (("" (case "n=0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (inst -1 "n" "n")
            (("2" (assert)
              (("2" (replace -1)
                (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (thm_fibo_app2_TCC1 0
  (thm_fibo_app2_TCC1-1 nil 3912046286 ("" (subtype-tcc) nil nil) nil
   nil
   (thm_fibo_app2 subtype
    "(number_fields.-)(number_fields.*(2, fib2.n), 1)" "nat"))))

